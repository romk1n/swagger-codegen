// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

@objc
protocol ModelLifecycle {
    @objc optional func didInit()
    @objc optional func willDeInit()
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}       

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    open init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    open convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
open class Decoders {

    static fileprivate func initialize() {
        _ = Decoders.__once
    }

    static fileprivate var decoders = Dictionary<String, ((Any) -> Any)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: @escaping ((Any) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as Any }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: Any) -> [T] {
        let array = source as! [Any]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: Any) -> [Key:T] {
        var dictionary = [Key:T]()
        if let sourceDictinoary = source as? [Key: Any] {
            for (key, value) in sourceDictinoary {
                dictionary[key] = Decoders.decode(clazz: T.self, source: value)
            }
        }
        return dictionary
    }
    
    open static func decode<T>(clazz clazz: T.Type, source: Any) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return (source as AnyObject).int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return (source as AnyObject).int64Value as! T;
        }
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: Any?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: Any) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: Any?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: Any) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: Any?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: Any) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> DateFormatter in
                let formatter = DateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for Date
            Decoders.addDecoder(clazz: Date.self) { (source: Any) -> Date in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } {{#models}}{{#model}}

            // Decoder for [{{{classname}}}]
            Decoders.addDecoder(clazz: [{{{classname}}}].self) { (source: Any) -> [{{{classname}}}] in
                return Decoders.decode(clazz: [{{{classname}}}].self, source: source)
            }
            // Decoder for {{{classname}}}
            Decoders.addDecoder(clazz: {{{classname}}}.self) { (source: Any) -> {{{classname}}} in
                {{#isEnum}}
                    let object = (source as? String) ?? ""
                    return {{{classname}}}(string:object)
                {{/isEnum}}
                {{^isEnum}}
                guard let sourceDictionary = source as? [AnyHashable:Any] else {
                    return {{classname}}()
                }
                {{#unwrapRequired}}
                let instance = {{classname}}({{#requiredVars}}{{^-first}}, {{/-first}}{{#isEnum}}{{name}}: {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "")! {{/isEnum}}{{^isEnum}}{{name}}: Decoders.decode(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"]!){{/isEnum}}{{/requiredVars}})
                {{#optionalVars}}
                {{#isEnum}}
                instance.{{name}} = {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "")
                {{/isEnum}}
                {{^isEnum}}
                instance.{{name}} = Decoders.decodeOptional(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"])
                {{/isEnum}}
                {{/optionalVars}}
                {{/unwrapRequired}}
                {{^unwrapRequired}}
                let instance = {{classname}}(){{#vars}}{{#isEnum}}
                instance.{{name}} = {{classname}}.{{datatypeWithEnum}}(rawValue: (sourceDictionary["{{baseName}}"] as? String) ?? "") {{/isEnum}}{{^isEnum}}
                instance.{{name}} = Decoders.decodeOptional(clazz: {{{baseType}}}.self, source: sourceDictionary["{{baseName}}"]){{/isEnum}}{{/vars}}
                {{/unwrapRequired}}
                (instance as ModelLifecycle).didInit?()
                return instance
                {{/isEnum}}
            }{{/model}}
			{{/models}}
        }
    }
}
